//Q(question):
// Какое будет выведено значение: let x = 5; alert( x++ ); ?

// A(answer):
// let x = 5;
// console.log(x++); //5 т.к. указана постфиксная форма, сперва показываем а потом только увеличиваем на 1.

// -----------------

//Q(question):
// Чему равно такое выражение: [ ] + false - null + true ?

// A(answer):
// let a = [] + false - null;
// console.log(a); // NaN - не число
// console.log(a + true); // Nan - не число

// -----------------

//Q(question):
// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?

// A(answer):
// let y = 1;
// let x = (y = 2);
// console.log(x); //2 т.к. примитивные типы данных передаются по значению, сперва y = 2 => x = y => x = 2;

// -----------------

//Q(question):
// Чему равна сумма [ ] + 1 + 2?

// A(answer):
// console.log([] + 1 + 2); //12 т.к. [] + 1 => string 1 => string 1+2 => 12

// -----------------

//Q(question):
// Что выведет этот код: alert("1"[0])?

// A(answer):
// console.log("1"[0]); //1 так как у string обращаться к символам строки мы можем обращаться по индексу.

// -----------------

//Q(question):
// Чему равно 2 && 1 && null && 0 && undefined?

// A(answer):
// console.log(2 && 1 && null && 0 && undefined); //null так как оператор и запинается на лжи.

// -----------------

//Q(question):
// Есть ли разница между выражениями? !!( a &amp;&amp; b ) и (a &amp;&amp; b)?

// A(answer):
// console.log(!!(1 && 2) === (1 && 2)); //Разница есть. Вернет false так как !!(1 && 2) вернеть boolean true, в то время как (1 && 2) вернет 2, а true != 2;

// -----------------

//Q(question):
// Что выведет этот код: alert( null || 2 &amp;&amp; 3 || 4 ); ?

// A(answer):
// console.log(null || (2 && 3) || 4); // Первый будет исполняться(см. таблицу приоритетов операторов) && => 3, null || 3 => 3, дальше код выполняться не будет, т.к. оператор || запинается на истине.

// -----------------

//Q(question):
// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

// A(answer):
// const a = [1, 2, 3];
// const b = [1, 2, 3];
// console.log(a === b); //Вернет false так как в одном массиве храняться одни данные, а в другом массиве храняться другие данные.

// -----------------

//Q(question):
// Что выведет этот код: alert(+"Infinity"); ?

// A(answer):
// console.log(+"Infinity"); // Вернет infinity, так как унарный + перед выражением приводит строку к типу number

// -----------------

//Q(question):
// Верно ли сравнение: &quot;Ёжик&quot; &gt; &quot;яблоко&quot;?

// A(answer):
// console.log("Ёжик" > "яблоко"); // вернет false, сравнение происходит по таблице символов ascii, где каждая буква имеет свое место и нумирацию.

// -----------------

//Q(question):
// Чему равно 0 || &quot;&quot; || 2 || undefined || true || falsе ?

// A(answer):
// console.log(0 || 2 || undefined || true || false);// вернет 2, т.к. оператор || запинается на истине, код дальше 0 || 2 исполняться не будет.
